#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var util = require('util');
var lib = require('../src/lib');
var compiler = require('../src/compiler');

if(process.argv.length < 3) {
    console.log('Usage: ' + path.basename(process.argv[1]) + ' <folder> [-f]');
    process.exit(1);
}

var folder = process.argv[2];
var force = false;
if(process.argv.length > 3) {
    process.argv.splice(3).forEach(function(e) {
        if (e === '-f') {
            force = true;
        }
    });
}
var templates = [];

function addTemplates(dir) {
    var files = fs.readdirSync(dir);

    for(var i=0; i<files.length; i++) {
        var filepath = path.join(dir, files[i]);
        var stat = fs.statSync(filepath);

        if(stat && stat.isDirectory()) {
            addTemplates(filepath);
        }
        else if(path.extname(filepath) == '.html') {
            templates.push(filepath);
        }
    }
}

addTemplates(folder);

util.puts('(function() {');
util.puts('var templates = {};');

for(var i=0; i<templates.length; i++) {
    var doCompile = function() {
        var src = lib.withPrettyErrors(
            templates[i],
            false,
            function() {
                return compiler.compile(fs.readFileSync(templates[i],
                                                        'utf-8'));
            }
        );
        var name = templates[i].replace(path.join(folder, '/'), '');

        util.puts('templates["' + name + '"] = (function() {');
        util.puts(src);
        util.puts('})();');
    }

    // Don't stop generating the output if we're forcing compilation.
    if(force) {
        try {
            doCompile();
        } catch(e) {
            console.error(e);
        }
    }
    else {
        doCompile();
    }
}

util.puts('nunjucks.env = new nunjucks.Environment([]);');
util.puts('nunjucks.env.registerPrecompiled(templates);');
util.puts('})()');
